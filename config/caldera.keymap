/*
* Copyright (c) 2022 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

/*
* Solo - Provided by https://github.com/vladsolokha and adapted
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE    0
#define NUM     1
#define SYM     2
#define NAV     3
#define SYS     4


&mt {
	flavor = "tap-preferred";
	tapping-term-ms = <300>;
	quick-tap-ms = <180>;
	require-prior-idle-ms = <100>;
};

&sk {
	release-after-ms = <800>;
	quick-release;
};

&caps_word {
	continue-list = <UNDERSCORE MINUS BSPC>;
};


/ {
	combos {
		compatible = "zmk,combos";

		/****************************************
		********** Left Hand Combos  ************
		*****************************************/

		combo_esc_l {
			timeout-ms = <40>;
			key-positions = <13 14>;
			bindings = <&kp ESC>;
		};

		combo_tab_l {
			timeout-ms = <40>;
			key-positions = <25 26>;
			bindings = <&kp TAB>;
		};

		combo_save {
			timeout-ms = <40>;
			key-positions = <27 28>;
			bindings = <&kp LC(S)>;
		};

		/****************************************
		********** Right Hand Combos  ***********
		****************************************/

		combo_backsp {
			timeout-ms = <40>;
			key-positions = <21 22>;
			bindings = <&kp BSPC>;
		};

		combo_esc_r {
			timeout-ms = <40>;
			key-positions = <31 32>;
			bindings = <&kp ESC>;
			layers = <0 1 2 3>;
		};

		combo_return {
			timeout-ms = <40>;
			key-positions = <33 34>;
			bindings = <&kp RETURN>;
			layers = <0 1 2 3>;
		};

		combo_del {
			timeout-ms = <40>;
			key-positions = <9 10>;
			bindings = <&kp DEL>;
		};

		combo_tab_r {
			timeout-ms = <40>;
			key-positions = <44 45>;
			bindings = <&kp TAB>;
		};

		/****************************
		******    Code Combos   *****
		******  Right Hand Vim  *****
		*****************************/

		// combo_focus_left {
		// 	timeout-ms = <35>;
		// 	key-positions = <32 43>;
		// 	bindings = <&kp LC(H)>;
		// };

		// combo_focus_right {
		// 	timeout-ms = <50>;
		// 	key-positions = <32 45>;
		// 	bindings = <&kp LC(L)>;
		// };

		// combo_focus_down {
		// 	timeout-ms = <35>;
		// 	key-positions = <31 44>;
		// 	bindings = <&kp LC(J)>;
		// };

		// combo_focus_up {
		// 	timeout-ms = <50>;
		// 	key-positions = <33 44>;
		// 	bindings = <&kp LC(K)>;
		// };

		/****************************************
		 ********** Both Hand Combos  ***********
		 ****************************************/

		combo_caps_word {
			timeout-ms = <55>;
			key-positions = <28 31>;
			bindings = <&caps_word>;
		};

	};

	behaviors {
		mo_kp: momentary_hold_key_press_hold {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <180>;
			quick-tap-ms = <180>;
			bindings = <&mo>, <&kp>;
		};

		mo_kp_tap: momentary_hold_key_press_tap_prefer {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <180>;
			require-prior-idle-ms = <100>;
			bindings = <&mo>, <&kp>;
		};

		sk_kp_tap: stiky_key_press_tap_prefer {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <220>;
			quick-tap-ms = <180>;
			require-prior-idle-ms = <100>;
			bindings = <&sk>, <&kp>;
		};

		bt_clcla: tap_dance_bt_control {
			compatible = "zmk,behavior-tap-dance";
			#binding-cells = <0>;
			tapping-term-ms = <300>;
			bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
		};

		sh_one: shift_pair_one_bang {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp EXCL>, <&kp NUM_1>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_two: shift_pair_two_at {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp AT>, <&kp NUM_2>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_three: shift_pair_three_hash {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp HASH>, <&kp NUM_3>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_four: shift_pair_four_dollar {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DLLR>, <&kp NUM_4>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_five: shift_pair_five_percent {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp PRCNT>, <&kp NUM_5>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_six: shift_pair_six_caret {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp CARET>, <&kp NUM_6>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_seven: shift_pair_seven_ampersand {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp AMPS>, <&kp NUM_7>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_eight: shift_pair_eight_asterisk {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp ASTRK>, <&kp NUM_8>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_nine: shift_pair_nine_left_paren {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp LPAR>, <&kp NUM_9>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		sh_zero: shift_pair_zero_right_paren {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp RPAR>, <&kp NUM_0>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};

	};

	keymap {
		compatible = "zmk,keymap";

		/* 0 */
		default {
			bindings = <
			&kp GRAVE    &sh_one                 &sh_two       &sh_three           &sh_four            &sh_five             /**/     &sh_six           &sh_seven      &sh_eight     &sh_nine            &sh_zero                &none
			&none        &kp APOS                &kp COMMA     &kp DOT             &kp P               &kp Y                /**/     &kp F             &kp G          &kp C         &kp R               &kp L                   &none
			&none        &mt LC(LA(LSHIFT)) A    &kp O         &mo_kp_tap NAV E    &mo_kp_tap NUM U    &kp I                /**/     &kp D             &kp H          &kp T         &mo_kp_tap SYS N    &mt LC(LA(LSHIFT)) S    &none
			&none        &kp SEMI                &mt LALT Q    &mt LCMD J          &mt LCTRL K         &kp X                /**/     &kp B             &mt LCTRL M    &mt LCMD W    &mt LALT V          &kp Z                   &none
			&none        &none                   &none         &none               &sk LSFT            &mo_kp SYM SPACE     /**/     &mo_kp SYM BSPC   &key_repeat    &none         &none               &none                   &none
			>;
		};

		/* 1 */
		numbers {
			bindings = <
			&none    &none       &none       &none       &none     &none      /**/     &none        &kp PLUS     &kp MINUS    &kp STAR     &kp SLASH    &none
			&none    &none       &none       &none       &none     &none      /**/     &none        &kp NUM_7    &kp NUM_8    &kp NUM_9    &none        &none
			&none    &none       &none       &none       &trans    &none      /**/     &kp MINUS    &kp NUM_4    &kp NUM_5    &kp NUM_6    &kp NUM_0    &none
			&none    &sk LALT    &sk LCMD    &sk LCTRL   &none     &none      /**/     &kp DOT      &kp NUM_1    &kp NUM_2    &kp NUM_3    &none        &none
			&none    &none       &none       &none       &trans    &trans     /**/     &trans       &kp NUM_0    &none        &none        &none        &none
			>;
		};

		/* 2 */
		symbol {
			bindings = <
			&kp F1   &kp F2           &kp F3         &kp F4           &kp F5            &kp F6        /**/     &kp F7           &kp F8          &kp F9         &kp F10         &kp F11      &kp F12
			&none    &kp GRAVE        &kp EXCL       &kp LBRC         &kp RBRC          &none         /**/     &none            &kp PERCENT     &kp PLUS       &kp EQUAL       &kp QMARK    &none
			&none    &kp UNDER        &kp AMPS       &kp LPAR         &kp RPAR          &kp TILDE     /**/     &kp CARET        &kp STAR        &kp HASH       &kp DOLLAR      &kp MINUS    &none
			&none    &kp SEMICOLON    &mt LALT AT    &mt LCMD LBKT    &mt LCTRL RBKT    &kp PIPE      /**/     &kp BACKSLASH    &mt LCTRL LT    &mt LCMD GT    &mt LALT DQT    &kp COLON    &none
			&none    &none            &none          &none            &trans            &trans        /**/     &trans           &trans          &none          &none           &none        &none
			>;
		};

		/* 3 */
		navigation {
			bindings = <
			&none    &none    &none              &none     &none           &none      /**/     &none       &none            &none          &none        &none    &none
			&none    &none    &kp INSERT         &none     &none           &none      /**/     &none       &kp END          &kp HOME       &none        &kp DEL  &none
			&none    &none    &mt LALT RETURN    &trans    &mt LCMD TAB    &none      /**/     &kp LEFT    &kp DOWN         &kp UP         &kp RIGHT    &none    &none
			&none    &none    &none              &none     &kp LCTRL       &none      /**/     &none       &kp PAGE_DOWN    &kp PAGE_UP    &none        &none    &none
			&none    &none    &none              &none     &trans          &trans     /**/     &trans      &trans           &none          &none        &none    &none
			>;
		};

		/* 4 */
		system {
			bindings = <
			&none    &none            &none                &none            &none           &none             /**/     &none       &none                   &none           &none     &none    &none
			&none    &bt_clcla        &ext_power EP_TOG    &out OUT_BLE     &out OUT_USB    &out OUT_TOG      /**/     &none       &none                   &none           &none     &none    &none
			&none    &bt BT_SEL 0     &bt BT_SEL 1         &bt BT_SEL 2     &bt BT_SEL 3    &bt BT_SEL 4      /**/     &none       &kp C_BRIGHTNESS_INC    &kp C_VOL_UP    &trans    &none    &none
			&none    &bt BT_DISC 0    &bt BT_DISC 1        &bt BT_DISC 2    &bt BT_DISC 3   &bt BT_DISC 4     /**/     &none       &kp C_BRIGHTNESS_DEC    &kp C_VOL_DN    &none     &none    &none
			&none    &none            &none                &none            &none           &none             /**/     &kp C_PP    &kp C_NEXT              &none           &none     &none    &none
			>;
		};
	};
};
